{{- if eq .Values.metrics.enabled true -}}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ .Values.name }}-sts
  namespace: {{ .Release.Namespace }}
spec:

  # Mode
  mode: "statefulset"

  # Number of replicas
  replicas: 2

  # Service Account
  serviceAccount: {{ .Values.name }}-sts

  # Target allocator
  targetAllocator:
    enabled: true
    serviceAccount: {{ .Values.name }}-sts
    prometheusCR:
      enabled: false

  # Ports to expose per service
  ports:
    - name: prometheus
      protocol: TCP
      port: {{ .Values.statefulset.ports.prometheus.port }}
      targetPort: {{ .Values.statefulset.ports.prometheus.targetPort }}

  # Image
  image: "{{ .Values.statefulset.image.repository }}:{{ .Values.statefulset.image.tag }}"
  imagePullPolicy: {{ .Values.statefulset.image.pullPolicy }}

  # Environment variables
  env:
    - name: MY_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
  {{- range $teamName, $teamInfo := .Values.statefulset.newrelic }}
    - name: {{ $teamName }}-endpoint
      value: {{ $teamInfo.endpoint }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ $.Values.name }}-sts
          key: {{ $teamName }}
  {{- end }}

  # Otel configuration
  config: |
    receivers:
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otelcollector'
              scrape_interval: 10s
              static_configs:
              - targets:
                - 0.0.0.0:{{ .Values.statefulset.ports.prometheus.port }}
      prometheus:
        config:
          scrape_configs:
            - job_name: 'kubernetes-apiservers'
              scrape_interval: 30s

              kubernetes_sd_configs:
                - role: endpoints
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              relabel_configs:
                - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                  action: keep
                  regex: default;kubernetes;https

            - job_name: 'kubernetes-nodes'
              scrape_interval: 30s
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              kubernetes_sd_configs:
                - role: node

              relabel_configs:
                # - action: labelmap
                #   regex: __meta_kubernetes_node_label_(.+)
                - target_label: __address__
                  replacement: kubernetes.default.svc:443
                - source_labels: [__meta_kubernetes_node_name]
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: /api/v1/nodes/$$1/proxy/metrics

            - job_name: 'kubernetes-nodes-cadvisor'
              scrape_interval: 30s
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              kubernetes_sd_configs:
                - role: node

              relabel_configs:
                # - action: labelmap
                #   regex: __meta_kubernetes_node_label_(.+)
                #   # replacement: $$1
                #   # separator: ;
                - target_label: __address__
                  replacement: kubernetes.default.svc:443
                - source_labels: [__meta_kubernetes_node_name]
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor

            - job_name: 'kubernetes-service-endpoints'
              scrape_interval: 30s
              honor_labels: true

              kubernetes_sd_configs:
                - role: endpoints

              relabel_configs:
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                  action: drop
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  target_label: __address__
                  regex: (.+?)(?::\d+)?;(\d+)
                  replacement: $$1:$$2
                # - action: labelmap
                #   regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                #   replacement: __param_$$1
                # - action: labelmap
                #   regex: __meta_kubernetes_service_label_(.+)
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: node

            - job_name: 'kubernetes-pods'
              scrape_interval: 30s
              honor_labels: true

              kubernetes_sd_configs:
                - role: pod

              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                  action: drop
                  regex: true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                  action: replace
                  regex: (https?)
                  target_label: __scheme__
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                  action: replace
                  regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                  replacement: '[$$2]:$$1'
                  target_label: __address__
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                  action: replace
                  regex: (\d+);((([0-9]+?)(\.|$)){4})
                  replacement: $$2:$$1
                  target_label: __address__
                # - action: labelmap
                #   regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                #   replacement: __param_$$1
                # - action: labelmap
                #   regex: __meta_kubernetes_pod_label_(.+)
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_pod_name]
                  action: replace
                  target_label: pod
                - source_labels: [__meta_kubernetes_pod_phase]
                  regex: Pending|Succeeded|Failed|Completed
                  action: drop

    processors:
      cumulativetodelta:
      k8sattributes:
        extract:
          metadata:
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.name
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      attributes:
        actions:
          - key: k8s.cluster.name
            value: {{ .Values.clusterName }}
            action: upsert
      attributes/self:
        actions:
          - key: otelcollector.type
            value: statefulset
            action: upsert
          - key: k8s.node.name
            value: $MY_NODE_NAME
            action: upsert
          - key: k8s.namespace.name
            value: $MY_NAMESPACE_NAME
            action: upsert
          - key: k8s.pod.name
            value: $MY_POD_NAME
            action: upsert
      {{- range $teamName, $teamInfo := .Values.statefulset.newrelic }}
      {{- if ne (len $teamInfo.namespaces) 0 }}
      filter/{{ $teamName }}:
        error_mode: ignore
        metrics:
          datapoint:
          {{ $condition := "IsMatch(attributes[\"namespace\"], " -}}
          {{- range $index, $namespace := $teamInfo.namespaces -}}
            {{- if eq $index 0 -}}
              {{- $condition = printf "%s\"%s" $condition $namespace -}}
            {{ else }}
              {{- $condition = printf "%s|%s" $condition $namespace -}}
            {{- end -}}
            {{- if eq $index (sub (len $teamInfo.namespaces) 1) -}}
              {{- $condition = printf "%s\") == false" $condition -}}
            {{- end -}}
          {{- end -}}
            - '{{ $condition }}'
      {{- end }}
      {{- end }}
      memory_limiter:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

    exporters:
    {{- range $teamName, $teamInfo := .Values.statefulset.newrelic }}
      otlp/{{ $teamName }}:
        endpoint: ${env:{{ $teamName }}-endpoint}
        tls:
          insecure: false
        headers:
          api-key: ${env:{{ $teamName }}-licenseKey}
    {{- end }}
      logging:
        # verbosity: detailed

    extensions:
      memory_ballast:
        size_in_percentage: 20

    service:
      extensions:
        - memory_ballast
      pipelines:
        metrics/self:
          receivers:
            - prometheus/self
          processors:
            - cumulativetodelta
            - k8sattributes
            - attributes
            - attributes/self
            - memory_limiter
            - batch
          exporters:
            - otlp/opsteam
            # - logging
      {{- range $teamName, $teamInfo := .Values.statefulset.newrelic }}
        metrics/{{ $teamName }}:
          receivers:
            - prometheus
          processors:
            - cumulativetodelta
            - k8sattributes
            - attributes
            - memory_limiter
          {{- if ne (len $teamInfo.namespaces) 0 }}
            - filter/{{ $teamName }}
          {{- end }}
            - batch
          exporters:
            - otlp/{{ $teamName }}
            # - logging
      {{- end }}
      telemetry:
        # logs:
        #   level: DEBUG
        metrics:
          address: 0.0.0.0:{{ .Values.statefulset.ports.prometheus.targetPort }}
{{- end -}}
