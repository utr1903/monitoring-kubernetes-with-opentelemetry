{{- if eq .Values.logs.enabled true -}}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ .Values.name }}-dep-rec
  namespace: {{ .Release.Namespace }}
spec:

  # Mode
  mode: "deployment"

  # Service Account
  serviceAccount: {{ .Values.name }}-dep

  # Ports to expose per service
  ports:
    - name: prometheus
      protocol: TCP
      port: {{ .Values.deployment.ports.prometheus.port }}
      targetPort: {{ .Values.deployment.ports.prometheus.targetPort }}

  # Image
  image: "{{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}"
  imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}

  # Environment variables
  env:
  {{- range $teamName, $teamInfo := .Values.statefulset.newrelic }}
  {{- if eq $teamName "opsteam" }}
    - name: {{ $teamName }}-endpoint
      value: {{ $teamInfo.endpoint }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ $.Values.name }}-sts
          key: {{ $teamName }}
  {{- end }}
  {{- end }}

  # Otel configuration
  config: |
    receivers:
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otelcollector'
              scrape_interval: 10s
              static_configs:
              - targets:
                - 0.0.0.0:{{ .Values.statefulset.ports.prometheus.port }}
      otlp:
        protocols:
          grpc:
          http:

    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800
      memory_limiter:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25
      cumulativetodelta:
      k8sattributes:
        extract:
          metadata:
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.name
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

    exporters:
      loadbalancing:
        protocol:
          otlp:
            tls:
              insecure: true
        resolver:
          dns:
            hostname: "{{ .Values.name }}-dep-exp-collector-headless.{{ .Release.Namespace }}.svc.cluster.local"
      otlp/opsteam:
        endpoint: ${opsteam-endpoint}
        tls:
          insecure: false
        headers:
          api-key: ${opsteam-licenseKey}
      logging:
        verbosity: detailed

    extensions:
      memory_ballast:
        size_in_percentage: 20

    service:
      extensions:
        - memory_ballast
      pipelines:
        metrics/self:
          receivers:
            - prometheus/self
          processors:
            - k8sattributes
            - memory_limiter
            - cumulativetodelta
            - batch
          exporters:
            - otlp/opsteam
            # - logging
        traces:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - k8sattributes
            - batch
          exporters:
            - loadbalancing
            # - logging
      telemetry:
        # logs:
        #   level: DEBUG
        metrics:
          address: 0.0.0.0:{{ .Values.deployment.ports.prometheus.targetPort }}
{{- end -}}
