apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ .Values.name }}
spec:

  # Mode
  mode: {{ .Values.mode }}

  # Number of replicas
  replicas: 2

  # Service Account
  serviceAccount: {{ .Values.name }}

  # Target allocator
  targetAllocator:
    enabled: true
    serviceAccount: {{ .Values.name }}
    prometheusCR:
      enabled: false

  # Pod annotations
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.prometheus.port }}"

  # Ports to expose per service
  ports:
    - name: prometheus
      protocol: TCP
      port: {{ .Values.prometheus.port }}
      targetPort: {{ .Values.prometheus.port }}

  # Image
  image: otel/opentelemetry-collector-contrib:0.73.0

  # Otel configuration
  config: |
    receivers:

      prometheus:
        config:
          scrape_configs:
            - job_name: 'otelcollector'
              scrape_interval: 10s
              static_configs:
              - targets:
                - 0.0.0.0:{{ .Values.prometheus.port }}

            - job_name: 'kubernetes-nodes-cadvisor'

              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              kubernetes_sd_configs:
                - role: node

              relabel_configs:
                # - action: labelmap
                #   regex: __meta_kubernetes_node_label_(.+)
                #   # replacement: $$1
                #   # separator: ;
                - target_label: __address__
                  replacement: kubernetes.default.svc:443
                - source_labels: [__meta_kubernetes_node_name]
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor

    processors:

      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

      memory_limiter:
         check_interval: 1s
         limit_percentage: 70
         spike_limit_percentage: 30

      cumulativetodelta:

      k8sattributes:
        extract:
          metadata:
          - k8s.cluster.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.name
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

    exporters:

      otlp:
        endpoint: {{ .Values.newrelicOtlpEndpoint }}
        tls:
          insecure: false
        headers:
          api-key: {{ .Values.newrelicLicenseKey }}

      logging:
        # verbosity: detailed

    extensions:

      memory_ballast:
        size_in_percentage: 20

      k8s_observer:
        auth_type: serviceAccount
        observe_pods: true
        observe_nodes: true

    service:
      extensions:
        - memory_ballast
        # - k8s_observer
      pipelines:
        metrics:
          receivers:
            # - receiver_creator
            - prometheus
          processors:
            - k8sattributes
            - batch
            - memory_limiter
            - cumulativetodelta
          exporters:
            - otlp
            # - logging
      telemetry:
        # logs:
        #   level: DEBUG
        metrics:
          address: 0.0.0.0:{{ .Values.prometheus.port }}
